from keyboards.inline.inline_keyboards import *
from keyboards.default.markup import *
from main import db, admin_id


async def all_my_announcement(message: types.Message):
    if not db.check_subscriber(message.from_user.id):
        db.add_subscriber(message.from_user.id)
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç, –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—á–Ω–∏ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!')
    elif not db.get_announcements_all():
        await message.reply(f'üì∞ –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç ‚ÄºÔ∏è')
    else:
        for unp in db.get_announcements_all():
            _, type_of_services, job_title, job_description, salary, phone, allow, _, _, _ = unp
            await message.reply(
                f"–¢–∏–ø: {type_of_services}\n–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_title}\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_description}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ü–ª–∞—Ç–∞: {salary}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {salary}",
            )


async def my_announcement(message: types.Message):
    if len(db.get_announcements_my(message.from_user.id)) == 0:
        await message.reply(f'‚ö†Ô∏è –°–æ–∑–¥–∞–π –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', reply_markup=await get_announce_create())
    else:
        for unp in db.get_announcements_my(message.from_user.id):
            id, type_of_services, job_title, job_description, salary, phone, allow, _, _, _ = unp
            get_allow = {
                True: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                False: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
            }
            await message.reply(
                f"–¢–∏–ø: {type_of_services}\n–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_title}\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {job_description}\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ü–ª–∞—Ç–∞: {salary}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                reply_markup=await get_announce_edit(id, get_allow[allow]))
        await message.reply(text='–°–æ–∑–¥–∞—Ç—å –æ–±—å—è–≤–ª–µ–Ω–∏–µ:', reply_markup=await get_announce_create())


async def get_all_resume(message: types.Message):
    if not db.get_resume_all():
        await message.answer(f'‚ùå –†–µ–∑—é–º–µ –Ω–µ—Ç ‚ÄºÔ∏è')
    else:
        for unp in db.get_resume_all():
            _, name, skills, area_of_residence, phone, _, _, _, _ = unp
            await message.answer(
                f"üë§ –ò–º—è: {name}\nü™õ –ù–∞–≤—ã–∫–∏: {skills}\nüåç –†–∞–π–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {area_of_residence}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                reply_markup=button)


async def my_resume(message: types.Message):
    if not db.get_resume_my(message.from_user.id):
        await message.reply(f'‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ ‚ÄºÔ∏è', reply_markup=await get_resumes_none())
    else:
        for unp in db.get_resume_my(message.from_user.id):
            id_resume, name, skills, area_of_residence, phone, allow, _, _, _ = unp
            get_allow = {
                True: '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                False: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
            }
            await message.answer(
                f"üë§ –ò–º—è: {name}\nü™õ –ù–∞–≤—ã–∫–∏: {skills}\nüåç –†–∞–π–æ–Ω –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {area_of_residence}\n‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}",
                reply_markup=await get_resumes_edit_keyboard(get_allow[allow], id_resume))


data_placed = {
    False: '–ê–≥–µ–Ω—Ç',
    True: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫',
}

data_allow = {
    True: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
    False: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
}


async def give_keybord(message: types.Message):
    await message.answer(text='fefe', reply_markup=keyboard_rule_konfendentsialnost)


# main_user_funk_ --- –ö–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—à—å —Å–≤–æ–µ
async def show_all_my_sell(message: types.Message):
    if db.show_all_my_announcements_sell(message.from_user.id):
        for un in db.show_all_my_announcements_sell(message.from_user.id):
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, allow, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–¶–µ–Ω–∞: {price}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await keyboards_announcements(id_an, allow=data_allow.get(allow)))
    else:
        await message.answer(text='–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥–∞–∂–µ')


async def show_all_my_rent(message: types.Message):
    if db.show_all_my_announcements_rent(message.from_user.id):
        for un in db.show_all_my_announcements_rent(message.from_user.id):
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, allow, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {price}\n–¢–∏–ø –∫–æ–º–Ω–∞—Ç—ã: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await keyboards_announcements_rent(id_an, allow=data_allow.get(allow)))
    else:
        await message.answer(text='–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∞—Ä–µ–Ω–¥–µ')


# main_user_funk_ --- –ö–æ–≥–¥–∞ —Å–º–æ—Ç—Ä–∏—à—å —á—É–∂–æ–µ
async def show_all_rent(message: types.Message):
    if db.show_all_announcements_rent():
        for un in db.show_all_announcements_rent():
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, _, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {price}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await requests_keyboards_announcements(id_an))
    else:
        await message.answer(text='–û–±—å—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∞—Ä–µ–Ω–¥—É –Ω–µ—Ç')


async def show_all_sell(message: types.Message):
    if db.show_all_announcements_sell():
        for un in db.show_all_announcements_sell():
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, _, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–¶–µ–Ω–∞: {price}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await sell_requests_keyboards_announcements(id_an))
    else:
        await message.answer(text='–û–±—å—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–¥–∞—á—É –Ω–µ—Ç')


async def rental_requests(message: types.Message):
    if db.show_request_rent(message.from_user.id):
        for unp in db.show_request_rent(message.from_user.id):
            for un in db.show_all_my_announcements_rent_request(unp[2]):
                await message.answer(text=f'üìç–ò–º—è: {unp[1]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {unp[0]}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{un[3]}\n{un[4]}')
    else:
        await message.answer(text='–ó–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É –Ω–µ—Ç')


async def purchasing_request(message: types.Message):
    if db.show_request_sell(message.from_user.id):
        for unp in db.show_request_sell(message.from_user.id):
            for un in db.show_all_my_announcements_sell_request(unp[2]):
                await message.answer(text=f'üìç–ò–º—è: {unp[1]}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {unp[0]}\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{un[3]}\n{un[4]}')
    else:
        await message.answer(text='–ó–∞—è–≤–æ–∫ –Ω–µ –ø–æ–∫—É–ø–∫—É –Ω–µ—Ç')


# second_user_funk

async def konfendentsialnost(message: types.Message):
    with open('utils/konfendentsialnost', 'r', encoding='UTF-8') as term_text:
        await message.answer(text=term_text.read())


async def rule(message: types.Message):
    with open('utils/rule', 'r', encoding='UTF-8') as term_text:
        await message.answer(text=term_text.read())


async def term(message: types.Message):
    with open('utils/term', 'r', encoding='UTF-8') as term_text:
        await message.answer(text=term_text.read())


async def dell_up(message: types.Message):
    await message.reply(text='–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', reply_markup=await make_choice_announcements())


# admin
async def confirmation_of_sales(message: types.Message):
    if db.admin_all_announcements_sell():
        for un in db.admin_all_announcements_sell():
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, _, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–¶–µ–Ω–∞: {price}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await sell_admin_keyboards_announcements(id_an))
    else:
        await message.answer(text='–û–±—å—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞ –∞—Ä–µ–Ω–¥—É –Ω–µ—Ç')


async def confirmation_of_rent(message: types.Message):
    if db.admin_all_announcements_rent():
        for un in db.admin_all_announcements_rent():
            id_an, price, number_of_rooms, street, rent_description, phone, placed, photo, date_time, _, _, _ = un
            await message.answer_photo(photo=photo)
            await message.answer(
                text=f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {price}\n–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: {number_of_rooms}\n–ê–¥—Ä–µ—Å: {street}\n–û–ø–∏—Å–∞–Ω–∏–µ: {rent_description}'
                     f'\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n–ö—Ç–æ —Å–¥–∞–µ—Ç: {data_placed.get(placed)}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(date_time)[0:-7]}',
                reply_markup=await rent_admin_keyboards_announcements(id_an))
    else:
        await message.answer(text='–û–±—å—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–∞ —Å–¥–∞—á—É –Ω–µ—Ç')
    # db.confirm_announcements_rent_admin()
